=head1 NAME

Tran::Manual::Extend - manual to extend tran

=head1 DESCRIPTION

Tran is not only for translation of Perl modules.
If you create subclass of Tran::Resource and Tran::Repository,
tran can work well for other resource or other translation repostiory.

In this manual, I'll explain the way to make subclass.

=head1 NAMING RULE OF CLASS

Class name must match the following regular expression.

 ^([A-Z][a-z\d]+)+$

Class name and name in configuration.

 Abc -> abc
 AbcDef -> abc-def
 AbcDefGhi -> abc-def-ghi

=head1 Tran::Resource Subclass

class about resource.
You have to implement the following method.

=head2 get

implement getting the original of targets and saving it to original repository.
Its argumetns are:

 $resource->get($target [, $version]);

If $version is omitted, get the latest version.

The return value is 2 pattern.

If target has existed alredy in original repository.

 ($self->target_translation($target), version->new($version))

If not,

 ($self->target_translation($target), version->new($version), \@files);

In @files, relative path from target directory under original repository directory.
For example, when resource cpan, target Module::Name, version 0.01:

 .tran/original/cpan/Module-Name/0.01/

paths in @files are after this directory.

=head2 _config

This method returns hash reference as configuration.
It is Resource::Cpan's setting.

 sub _config {
   return
     {
      translation => 'jprp-modules',
      metafile => "$ENV{HOME}/.cpan/Metadata",
      target_only => [
                      '*.pm',
                      '*.pod',
                     ],
      'targets' => {
                    'perl',
                    => {
                        translation => 'jprp-core',
                       },
                    'Moose'
                    => {
                        translation => 'jpa',
                       },
                    'MooseX::Getopt'
                    => {
                        translation => 'jpa',
                       },
 
                   }
     };
 }

=head1 Tran::Repository Subclass

Class for translation repository.
You have to implement the following methods.

=head2 path_format

return target name and version to save.
for example, JPRP:

 sub path_format { return "%n-%v" }

for example, JPA:

 sub path_format { return "%n-Doc-JA" }

%n is target name and %v is version.

=head2 has_target

 $translation->has_target($target);

It checks whether translation repositry has target.
If exists, it returns 1 otherwise 0.
This method doesn't check version.

=head2 copy_option

 $translation->copy_option

It returns the options when tra copy/merge orginal repository to translation repository.
As an example, the following is Translation::JprpModules options.

 sub copy_option {
   return {
           ignore_path     => ['t', 'inc'],
           # see Tran::Util
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }

ignore_path is path wihch will ignores when copy & merge.
contents_filter is function reference, if you need changing original file when copy to translation repository.
name_filter is used if file name has to be changed when copy to translation repository.

The arguments of contents_filter are:

 $contents_filter->($self, $name, $content)

This returns modified $content.

The areguments of name_filter:

 $name_filter->($self, $name);

This returns modified $name.

=head2 get_versions

 $translation->get_versions($target);

returns version of $target in translation repository.
This returns:

 $self->{versions}->{$self->target_path($target)} = [ map version->new($_), @versions];

=head2 _config

=head1 Tran::VCS Subclass

If translation repository uses version control system(VCS) as its backend,
this class can do some operation to the VCS.
This class is optional.

=head2 connect

=head2 update

=head2 add_files

=head2 commit

=head1 L<Tran::Notify> Subclass

=head2 SEE ALSO

=over 4

=item Tran::Manual

Document of Tran itself. Tutorial.

=back

Check base class of each sub class.

=over 4

=item <Tran::Resource>

=item <Tran::Repository>

=item <Tran::Repository::Original>

=item <Tran::Repository::Translation>

=item <Tran::Notify>

=item <Tran::VCS>

=back

=head1 AUTHOR

Ktat, C<< <ktat at cpan.org> >>

=head1 COPYRIGHT & LICENCE

Copyright 2010 Ktat.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

=head1 NAME

Tran::Manual::Extend - manual to extend tran

=head1 DESCRIPTION

Tran is not only for translation of Perl modules.
If you create subclass of Tran::Resource and Tran::Repository,
tran can work well for other resource or other translation repostiory.

In this manual, I'll explain the way to make subclass.

=head1 NAMING RULE OF CLASS

Class name must match the following regular expression.

 ^([A-Z][a-z\d]+)+$

Class name and name in configuration.

 Abc -> abc
 AbcDef -> abc-def
 AbcDefGhi -> abc-def-ghi

=head1 Tran::Resource Subclass

class about resource.
You have to implement the following method.

=head2 get

implement getting the original of targets and saving it to original repository.
Its argumetns are:

 $resource->get($target [, $version]);

If $version is omitted, get the latest version.

The return value is 2 pattern.

If target has existed already in original repository.

 (0, $self->target_translation($target), version->new($version));

If not,

 (1, $self->target_translation($target), version->new($version));

The following is special case:
If you want to change target name from the target which user inputted, you should pass arrayref as last return values.
The first arugument is new target name and the second is the path of the target file(currently, only 1 file is supported).

 ['target_name', 'file_path']

The case of the resource 'Cpan', perlootut is Perl's core document, so target is regarded as 'perl'.

 (1, $self->target_translation($target), version->new($version), undef, ['perl', 'perlootut.pod']);

This array reference is used for checking version.

 $repository->has_version($target, $version[, $optional_path]);

If $optional_path('perlootut.pod') exists, it checks whether version directory exists
and whether $optional_path exists.

For example:

In perl/5.18.1/, the following files exist.

 perl/5.18.1/perlrun.pod
 perl/5.18.1/perlpod.pod

Now, if target is perl and target's version 5.18.1, and user want to start translation of perlootut.pod.
tran must check the following path.

 perl/5.18.1/perlootut.pod

So in such case, $optional_path is required.

=head2 _config

This method returns hash reference as configuration.
It is Resource::Cpan's setting.

 sub _config {
   return
     {
      translation => 'jprp-modules',
      metafile => "$ENV{HOME}/.cpan/Metadata",
      target_only => [
                      '*.pm',
                      '*.pod',
                     ],
      'targets' => {
                    'perl',
                    => {
                        translation => 'jprp-core',
                       },
                    'Moose'
                    => {
                        translation => 'jpa',
                       },
                    'MooseX::Getopt'
                    => {
                        translation => 'jpa',
                       },
 
                   }
     };
 }

=head1 Tran::Repository Subclass

Class for translation repository.
You have to implement the following methods.

=head2 path_format

return target name and version to save.
for example, JPRP:

 sub path_format { return "%n-%v" }

for example, JPA:

 sub path_format { return "%n-Doc-JA" }

%n is target name and %v is version.

=head2 has_target

 $translation->has_target($target);

It checks whether translation repositry has target.
If exists, it returns 1 otherwise 0.
This method doesn't check version.

=head2 copy_option

 $translation->copy_option

It returns the options when tra copy/merge orginal repository to translation repository.
As an example, the following is Translation::JprpModules options.

 sub copy_option {
   return {
           ignore_path     => ['t', 'inc'],
           # see Tran::Util
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }

ignore_path is path wihch will ignores when copy & merge.
contents_filter is function reference, if you need changing original file when copy to translation repository.
name_filter is used if file name has to be changed when copy to translation repository.

The arguments of contents_filter are:

 $contents_filter->($self, $name, $content)

This returns modified $content.

The areguments of name_filter:

 $name_filter->($self, $name);

This returns modified $name.

=head2 get_versions

 $translation->get_versions($target);

returns version of $target in translation repository.
This returns:

 $self->{versions}->{$self->target_path($target)} = [ map version->new($_), @versions];

=head2 _config

=head1 Tran::VCS Subclass

If translation repository uses version control system(VCS) as its backend,
this class can do some operation to the VCS.
This class is optional.

=head2 connect

=head2 update

=head2 add_files

=head2 commit

=head1 L<Tran::Notify> Subclass

=head2 Translation Repostiory for Private Project

tran includes C<~/.tran/lib/> in library path.
For example, I put the follwoing module for L<KiokuDB>.

 package Tran::Repository::Translation::KiokuDb;
 
 use warnings;
 use strict;
 use base qw/Tran::Repository::Translation/;
 use File::Slurp qw(write_file);
 use Tran::Util -common, -list, -file, -prompt, -debug, -pod => ['pm2pod'];
 
 sub path_format { undef }
 
 sub copy_option {
   return {
           target_path => 'lib/KiokuDB/Tutorial.pod',
           ignore_path => 'lib/POD2',
           omit_path   => 'lib',
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }
 
 sub pm2pod_name {
   my ($self, $name) = @_;
   $name =~ s{\.pm}{.pod};
   $name = 'lib/POD2/JA/' . $name;
   $name =~s{/+}{/}g;
   return $name
 }
 
 sub get_versions {
   my ($self, $target) = @_;
   Carp::croak("target is required as first argument")  if @_ != 2;
   my $name = $self->target_path($target);
   return if exists $self->{versions}->{$name} and $self->{versions}->{$name};
   my $translation_target_dir = $self->directory;
   my $version_file = path_join($translation_target_dir, '.tran_version');
   my @versions;
   if (open my $in, '<', $version_file) {
     chomp(my $version = <$in>);
     $self->debug("read version from: $version_file ($version)");
     close $in;
     push @versions, version->new($version);
   } else {
     $self->fatal("cannot open file($version_file)");
   }
   return $self->{versions}->{$name} = [sort {$a cmp $b} @versions];
 }
 
 sub update_version_info {
   my ($self, $target, $version) = @_;
   my $target_path = $self->target_path($target);
   my $target_dir = $self->path_of($target_path, $version);
   my $version_file = path_join($target_dir, '.tran_version');
   write_file($version_file, $version);
   $self->info("version file($version_file) is created.");
 }
 
 sub has_target {
   my ($self, $target) = @_;
   my $target_path = $self->target_path($target);
   return -d $self->directory . '/' . $target_path ? 1 : 0;
 }
 
 1;

config is:

 repository:
   ...
   translation:
     kioku-db:
       directory: /home/ktat/git/github/kiokudb/
 
 resource:
   cpan:
     ...
     targets:
       KiokuDB:
         translation: kioku-db

=head2 SEE ALSO

=over 4

=item Tran::Manual

Document of Tran itself. Tutorial.

=back

Check base class of each sub class.

=over 4

=item <Tran::Resource>

=item <Tran::Repository>

=item <Tran::Repository::Original>

=item <Tran::Repository::Translation>

=item <Tran::Notify>

=item <Tran::VCS>

=back

=head1 AUTHOR

Ktat, C<< <ktat at cpan.org> >>

=head1 COPYRIGHT & LICENCE

Copyright 2010 Ktat.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

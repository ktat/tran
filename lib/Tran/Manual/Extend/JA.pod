=encoding utf8

=head1 名前

Tran::Manual::Extend::JA - tran の拡張マニュアル

=head1 概要

Tranは、Perlモジュールの翻訳に特化したアプリケーションではありません。
Tran::ResourceやTran::Repository::Translationのサブクラスを作ることで、
他のリソースや、他の翻訳リポジトリにも対応可能です。

このマニュアルでは、サブクラスの作成方法について解説します。

=head1 クラス名の命名規則

クラス名は、以下の正規表現にマッチしなければいけません。

 ^([A-Z][a-z\d]+)+$

大文字が2文字以上連続してはいけません。
以下、クラス名と設定ファイルに書かれる名前との対応例:

 Abc -> abc
 AbcDef -> abc-def
 AbcDefGhi -> abc-def-ghi

=head1 Tran::Resourceのサブクラス

リソースに関するクラスです。
実装するメソッドは以下になります。

=head2 get

ターゲットのオリジナルの取得と、オリジナルリポジトリへの保存方法を実装します。

引数は、

 $resource->get($target [, $version]);

バージョンが渡されなかった場合は、最新のものを取得します。

返値には、2パターンあります。

既に指定されたバージョンか、省略された場合は最新の、オリジナルを取得済みの場合、

 ($self->target_translation($target), version->new($version))

今回、新たに取得した場合、

 ($self->target_translation($target), version->new($version), \@files);

@files は、保存するファイルのオリジナルリポジトリのターゲットのディレクトリからの相対パスを指定します。
リソースcpanの、Module::Name 0.01の場合は、

 .tran/original/cpan/Module-Name/0.01/

より後ろのファイル名になります。

=head2 _config

このメソッドには、設定内容をハッシュリファレンスで記述します。
Resource::Cpanの内容を例として書いておきます。

 sub _config {
   return
     {
      translation => 'jprp-modules',
      metafile => "$ENV{HOME}/.cpan/Metadata",
      target_only => [
                      '*.pm',
                      '*.pod',
                     ],
      'targets' => {
                    'perl',
                    => {
                        translation => 'jprp-core',
                       },
                    'Moose'
                    => {
                        translation => 'jpa',
                       },
                    'MooseX::Getopt'
                    => {
                        translation => 'jpa',
                       },
 
                   }
     };
 }

=head1 Tran::Repository::Translationのサブクラス

翻訳リポジトリに関するクラスです。
実装するメソッドは以下になります。

=head2 path_format

ターゲット名とバージョンをどのように保存するかを決めます。
JPRPでは、以下のようになります。

 sub path_format { return "%n-%v" }

JPAでは以下のようになります。

 sub path_format { return "%n-Doc-JA" }

%n がターゲット名で、%v がバージョンになります。

=head2 has_target

 $translation->has_target($target);

翻訳リポジトリに既にターゲットがあるかないかをチェックします。
このメソッドではバージョンをチェックしませんので、
以前に翻訳したものがあれば、1を返し、そうでなければ、0を返します。

=head2 copy_option

 $translation->copy_option

オリジナルリポジトリから翻訳リポジトリにコピーやマージする際のオプションを返します。
参考に Translation::JprpModulesのオプションを書いておきます。

 sub copy_option {
   return {
           ignore_path     => ['t', 'inc'],
           # see Tran::Util
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }

ignore_path は、無視するパスの設定です。
contents_filter は、関数リファレンスで、オリジナルのファイル内容を変換して翻訳リポジトリに保存する場合に、指定します。
name_filter は、ファイル名がオリジナルから変更される場合に指定します。

contents_filter の引数は、

 $contents_filter->($self, $name, $content)

で、変更された $contentを返します。

name_filter の引数は、

 $name_filter->($self, $name);

で、変更された $nameを返します。

=head2 get_versions

 $translation->get_versions($target);

翻訳リポジトリに保存されている $target のバージョン情報を返します。

 $self->{versions}->{$self->target_path($target)} = [ map version->new($_), @versions];

を返します。

=head2 _config

このメソッドには、設定内容をハッシュリファレンスで記述します。
Translation::JprpModulesの内容を例として書いておきます。

 sub _config {
   my $self = shift;
   return
     {
      vcs => {
              wd => bless(sub { prompt("directory you've checkouted for JPRP cvs repository",
                                 sub {
                                   if (-d shift(@_) . '/CVS') {
                                     return 1
                                   } else {
                                     $self->warn("directory is not found or not directory CVS checkouted");
                                     return 0;
                                   }
                                 }
                                ) }, 'PROMPT'),
             },
      directory => sub { my $self = shift; return (\$self->{vcs}->{wd}, '/docs/modules/') },
     };
 }

wd は、C<< bless sub {...} 'PROMPT' >> というオブジェクトになっています。
単純に関数リファレンスの場合は、値として、その関数の実行結果が入りますが、
"PROMPT"にblessされたオブジェクトにすることで、それがインタラクティブな設定であることを明示できます。

directoryの設定は関数リファレンスで実行された結果が、その値となりますが、
中身が特殊ですので、説明します。

 sub { my $self = shift; return(\($self->{vcs}->{wd}), '/docs/modules/')  }

$self は、_config が返すハッシュリファレンスそのものです。ですので、
C<< $self->{vcs}->{wd} >>とは、先ほど説明した、C<< bless sub {...} 'PROMPT' >> というオブジェクトになります。
ここで、さらにそのリファレンスが返されているのに注意してください。
その先にある値が代入されるのですが、先にある値が関数リファレンスなどの場合は、実行結果が代入されます。
なお、ここで、return は2つの値を返していますが、これらは単純に join されます。

=head1 Tran::VCSのサブクラス

翻訳リポジトリのバックエンドのバージョンコントロールシステム(VCS)に関するクラスです。
このクラスはオプショナルです。別に実装しなくてもかまいません。

なお、TranはVCSへの操作を抽象化していません。現在のところ、下記のモジュールを使って、VCSを操作しています。

 Cvs::Simple
 Git::Class

実装するメソッドは以下になります。

=head2 connect

 $vcs->connect;

VCSへ接続します。

=head2 update

 $vcs->update($path);

VCSで$path以下をupdateします。

=head2 add_files

 $vcs->add_files($target_path);

VCSに$target_path以下のファイルを add します。

=head2 commit

 $vcs->commit($path);

VCSに$path以下をコミットします。

=head1 L<Tran::Notify> のサブクラス

通知に使うサブクラスです。
以下のメソッドを実装します。

=head2 notify

 $notify->notify($cmd, $target, $version);

のように呼ばれます。$cmd は、tran で定義されているコマンド名です。
すべてのコマンドが、notifyを呼び出しているわけではありません。

=head1 Tran::Utilユーティリティ関数

Tran::Utilには、Tranで使っているいくつかのユーティリティ関数があります。

=head2 -common

 use Tran::Util -common

tran全体で使われる関数群を export します。が、現在のところ、logに関連したメソッドのみをexportします。
なお、これは、関数ではなく、メソッドです。

 $object->warn($message);
 $object->error($message);
 $object->fatal($message);
 $object->info($message);
 $object->debug($message);

これらは、設定ファイルで定義されているログクラスへの proxy になっているだけです。
実際の実装は、ログクラスに依存します。

=head2 -file

 use Tran::Util -file;

File::Slurp, File::Find, File::Copy の関数を export します。

=head2 -string

 use Tran::Util -string;

tranで使われる、クラス名と設定ファイル内の名前との相互変換のための、
camelize, decamelizeを export します。

 camelize('abc-def'); # AbcDef
 decamelize('AbcDef'); # abc-def

=head2 プライベートなプロジェクトのための翻訳リポジトリ

tran はライプラリのパスに、 C<~/.tran/lib/> を含めています。
例えば、筆者はL<KiokuDB>用に以下のようなモジュールを作っています。

 package Tran::Repository::Translation::KiokuDb;
 
 use warnings;
 use strict;
 use base qw/Tran::Repository::Translation/;
 use File::Slurp qw(write_file);
 use Tran::Util -common, -list, -file, -prompt, -debug, -pod => ['pm2pod'];
 
 sub path_format { undef }
 
 sub copy_option {
   return {
           target_path => 'lib/KiokuDB/Tutorial.pod',
           ignore_path => 'lib/POD2',
           omit_path   => 'lib',
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }
 
 sub pm2pod_name {
   my ($self, $name) = @_;
   $name =~ s{\.pm}{.pod};
   $name = 'lib/POD2/JA/' . $name;
   $name =~s{/+}{/}g;
   return $name
 }
 
 sub get_versions {
   my ($self, $target) = @_;
   Carp::croak("target is required as first argument")  if @_ != 2;
   my $name = $self->target_path($target);
   return if exists $self->{versions}->{$name} and $self->{versions}->{$name};
   my $translation_target_dir = $self->path_of($name);
   my $version_file = path_join($translation_target_dir, '.tran_version');
   my @versions;
   if (open my $in, '<', $version_file) {
     chomp(my $version = <$in>);
     $self->debug("read version from: $version_file ($version)");
     close $in;
     push @versions, version->new($version);
   } else {
     $self->fatal("cannot open file($version_file)");
   }
   return $self->{versions}->{$name} = [sort {$a cmp $b} @versions];
 }
 
 sub update_version_info {
   my ($self, $target, $version) = @_;
   my $target_path = $self->target_path($target);
   my $target_dir = $self->path_of($target_path, $version);
   my $version_file = path_join($target_dir, '.tran_version');
   write_file($version_file, $version);
   $self->info("version file($version_file) is created.");
 }
 
 sub has_target {
   my ($self, $target) = @_;
   my $target_path = $self->target_path($target);
   return -d $self->directory . '/' . $target_path ? 1 : 0;
 }
 
 1;

config is:

 repository:
   ...
   translation:
     kioku-db:
       directory: /home/ktat/git/github/kiokudb/
 
 resource:
   cpan:
     ...
     targets:
       KiokuDB:
         translation: kioku-db

=head2 SEE ALSO

=over 4

=item L<Tran::Manual::JA>

Tran自体のドキュメント。チュートリアル。

=back

各サブクラスのベースクラスもチェックしておいてください。

=over 4

=item L<Tran::Resource>

=item L<Tran::Repository>

=item L<Tran::Repository::Original>

=item L<Tran::Repository::Translation>

=item L<Tran::Notify>

=item L<Tran::VCS>

=back

=head1 著者

Ktat, C<< <ktat at cpan.org> >>

=head1 コピーライト & ライセンス

Copyright 2010 Ktat.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

=encoding utf8

=head1 名前

Tran::Manual::Extend::JA - tran の拡張マニュアル

=head1 概要

Tranは、Perlモジュールの翻訳に特化したアプリケーションではありません。
Tran::ResourceやTran::Repository::Translationのサブクラスを作ることで、
他のリソースや、他の翻訳リポジトリにも対応可能です。

このマニュアルでは、サブクラスの作成方法について解説します。

=head1 Tran::Resourceのサブクラス

リソースに関するクラスです。
実装するメソッドは以下になります。

=head2 get

ターゲットのオリジナルの取得と、オリジナルリポジトリへの保存方法を実装します。

引数は、

 $resource->get($target [, $version]);

バージョンが渡されなかった場合は、最新のものを取得します。

返値には、2パターンあります。

既に指定されたバージョン(省略された場合は最新の)オリジナルを取得済みの場合、

 ($self->target_translation($target), version->new($version))

今回、新たに取得した場合、

 ($self->target_translation($target), version->new($version), \@files);

@files は、保存するファイルのオリジナルリポジトリのディレクトリからの相対パスを指定します。

=head2 _config

このメソッドには、設定内容をハッシュリファレンスで記述します。
Resource::Cpanの内容を例として書いておきます。

 sub _config {
   return
     {
      translation => 'jprp-modules',
      metafile => "$ENV{HOME}/.cpan/Metadata",
      target_only => [
                      '*.pm',
                      '*.pod',
                     ],
      'targets' => {
                    'perl',
                    => {
                        translation => 'jprp-core',
                       },
                    'Moose'
                    => {
                        translation => 'jpa',
                       },
                    'MooseX::Getopt'
                    => {
                        translation => 'jpa',
                       },
 
                   }
     };
 }

=head1 Tran::Repository::Translationのサブクラス

翻訳リポジトリに関するクラスです。
実装するメソッドは以下になります。

=head2 path_format

ターゲット名とバージョンをどのように保存するかを決めます。

 sub path_format { return "%n-%v" }

%n がターゲット名で、%v がバージョンになります。

=head2 has_target

 $translation->has_target($target);

翻訳リポジトリに既にターゲットがあるかないかをチェックします。

=head2 copy_option

 $translation->copy_option

オリジナルリポジトリから翻訳リポジトリにコピーする際のオプションを返します。
参考に Translation::JprpModulesのオプションを書いておきます。

 sub copy_option {
   return {
           ignore_path     => ['t', 'inc'],
           # see Tran::Util
           contents_filter => \&pm2pod,
           name_filter     => \&pm2pod_name,
          };
 }

ignore_path は、無視するパスの設定です。
contents_filter は、関数リファレンスで、オリジナルのファイル内容を変換して翻訳リポジトリに保存する場合に、指定します。
name_filter は、ファイル名がオリジナルから変更される場合に指定します。

=head2 get_versions

 $translation->get_versions($target);

翻訳リポジトリに保存されている $target のバージョン情報を返します。

 $self->{versions}->{$self->target_path($target)} = [ map version->new($_), @versions];

を返します。

=head2 _config

このメソッドには、設定内容をハッシュリファレンスで記述します。
Translation::JprpModulesの内容を例として書いておきます。

 sub _config {
   my $self = shift;
   return
     {
      vcs => {
              wd => bless(sub { prompt("directory you've checkouted for JPRP cvs repository",
                                 sub {
                                   if (-d shift(@_) . '/CVS') {
                                     return 1
                                   } else {
                                     $self->warn("directory is not found or not directory CVS checkouted");
                                     return 0;
                                   }
                                 }
                                ) }, 'PROMPT'),
             },
      directory => sub { my $self = shift; return (\$self->{vcs}->{wd}, '/docs/modules/') },
     };
 }

wd C<< bless sub {...} 'PROMPT' >> というオブジェクトになっています。
単純に関数リファレンスの場合は、値として、その関数の実行結果が入りますが、
"PROMPT"にblessされたオブジェクトにすることで、それがインタラクティブな設定であることを明示できます。

directoryの設定は関数リファレンスで実行された結果が、その値となりますが、
中身が特殊ですので、説明します。

 sub { my $self = shift; return(\($self->{vcs}->{wd}), '/docs/modules/')  }

$self は、_config が返すハッシュリファレンスそのものです。ですので、
C<< $self->{vcs}->{wd} >>とは、先ほど説明した、C<< bless sub {...} 'PROMPT' >> というオブジェクトになります。
ここで、さらにそのリファレンスが返されているのに注意してください。
その先にある値が代入されるのですが、先にある値が関数リファレンスなどの場合は、実行結果が代入されます。
なお、ここで、return は二つの値を返していますが、これらは単純に join されます。

=head1 Tran::VCSのサブクラス

翻訳リポジトリのバックエンドのバージョンコントロールシステム(VCS)に関するクラスです。
このクラスはオプショナルです。別に実装しなくてもかまいません。

なお、TranはVCSへの操作を抽象化していません。現在のところ、下記のモジュールを使って、VCSを操作しています。

 Cvs::Simple
 Git::Class

実装するメソッドは以下になります。

=head2 connect

 $vcs->connect;

VCSへ接続します。

=head2 update

 $vcs->update($path);

VCSで$path以下をupdateします。

=head2 add_files

 $vcs->add_files($target_path);

VCSに$target_path以下のファイルを add します。

=head2 commit

 $vcs->commit($path);

VCSに$path以下をコミットします。

=head1 著者

Ktat, C<< <ktat at cpan.org> >>

=head1 コピーライト & ライセンス

Copyright 2010 Ktat.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut
